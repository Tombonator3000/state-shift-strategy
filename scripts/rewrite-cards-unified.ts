// Run: bun scripts/rewrite-cards-unified.ts
import fs from "fs";
import path from "path";
import { pathToFileURL } from "url";
import { CanonicalEffects } from "../src/rules/v21e-strict";
import { validateCanonicalEffects } from "../src/rules/validateEffects";
import { evuOf, priceIP } from "../src/rules/evu";
import { RARITY_BUDGET, TYPE_WHITELIST, TEMPLATES, REWRITE_MODE } from "../src/rules/unified-policy";

type Rarity = "common"|"uncommon"|"rare"|"legendary";
type Card = {
  id: string;
  name: string;
  faction: "truth"|"government"|"Truth"|"Government";
  type: "ATTACK"|"DEFENSIVE"|"MEDIA"|"ZONE";
  rarity: Rarity;
  cost: number;
  effects?: CanonicalEffects;
};

async function loadCards(): Promise<Card[]> {
  try {
    const core = await import("../src/data/core/index.ts");
    const cards = (core as any).CARD_DATABASE_CORE;
    if (Array.isArray(cards) && cards.length) {
      return cards as Card[];
    }
  } catch (err) {
    // fall back to manual module aggregation below
  }

  const dataDir = path.resolve(process.cwd(), "src/data/core");
  const files = await fs.promises.readdir(dataDir);
  const cards: Card[] = [];

  for (const file of files) {
    if (!file.endsWith(".ts")) continue;
    if (file === "index.ts" || file === "rewritten.ts") continue;
    const modPath = pathToFileURL(path.join(dataDir, file)).href;
    const module = await import(modPath);

    for (const key of Object.keys(module)) {
      const value = (module as any)[key];
      if (Array.isArray(value) && value.length && typeof value[0] === "object" && "id" in value[0]) {
        cards.push(...value);
      }
    }

    if (Array.isArray(module?.cards)) cards.push(...module.cards);
    if (Array.isArray(module?.default)) cards.push(...module.default);
  }

  return cards;
}

(async function main(){
  const cards = await loadCards();

  const rewritten: Card[] = [];
  const report: string[] = [];

  for (const c of cards) {
    const r = (c.rarity || "common") as Rarity;
    const wl = new Set(TYPE_WHITELIST[c.type]);
    const errs = validateCanonicalEffects(c.effects || {}, `${c.id}.effects`);
    const keys = Object.keys(c.effects || {});
    const typeOk = keys.every(k => wl.has(k as keyof CanonicalEffects));

    const currentEVU = evuOf(c.effects || {});
    const budget = RARITY_BUDGET[r];

    let newEffects: CanonicalEffects = c.effects || {};

    const useTemplate = () => {
      const t = (TEMPLATES[c.type] as any)?.[r];
      if (!t) throw new Error(`No template for ${c.type}.${r}`);
      return structuredClone(t) as CanonicalEffects;
    };

    if (REWRITE_MODE === "strict") {
      newEffects = useTemplate();
      report.push(`${c.id}: strict->template (${c.type}.${r})`);
    } else {
      if (!errs.length && typeOk && currentEVU <= budget) {
        newEffects = c.effects || {};
        report.push(`${c.id}: hybrid->kept (EVU ${currentEVU}/${budget})`);
      } else {
        newEffects = useTemplate();
        report.push(`${c.id}: hybrid->templated (old EVU ${currentEVU}, budget ${budget}, errs=${errs.length}, typeOk=${typeOk})`);
      }
    }

    const evu = evuOf(newEffects);
    const ip  = priceIP(c.type, evu);
    const typeIllegal = Object.keys(newEffects).some(k => !wl.has(k as keyof CanonicalEffects));
    if (typeIllegal) report.push(`${c.id}: TEMPLATE ILLEGAL for type ${c.type} (keys=${Object.keys(newEffects).join(",")})`);

    rewritten.push({
      ...c,
      effects: newEffects,
      cost: ip,
      rarity: r,
      faction: c.faction.toLowerCase() as "truth"|"government",
    });
  }

  const outDir = "src/data/core";
  const outPath = path.join(outDir, "rewritten.ts");
  const ts = `// AUTO-GENERATED by rewrite-cards-unified.ts\nimport type { GameCard } from \"@/types/cardTypes\";\nimport type { CanonicalEffects } from \"@/rules/v21e-strict\";\n\nexport type CoreCard = Omit<GameCard, \"effects\" | \"rarity\" | \"faction\" | \"type\"> & {\n  faction: \"truth\" | \"government\";\n  type: \"ATTACK\" | \"DEFENSIVE\" | \"MEDIA\" | \"ZONE\";\n  rarity: \"common\" | \"uncommon\" | \"rare\" | \"legendary\";\n  effects: CanonicalEffects;\n};\n\nexport const CARD_DATABASE_CORE_REWRITTEN: CoreCard[] = ${JSON.stringify(rewritten, null, 2)};\n`;
  fs.writeFileSync(outPath, ts);
  fs.writeFileSync(path.join(outDir, "rewrite-report.txt"), report.join("\n"));

  console.log(`âœ“ Rewrote ${rewritten.length} cards -> ${outPath}`);
})();
