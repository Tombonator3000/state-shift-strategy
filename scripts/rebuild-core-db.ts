import fs from 'fs';
import path from 'path';
import { glob } from 'glob';

const header = `// AUTO-GENERATED by scripts/rebuild-core-db.ts
// This file was regenerated to recover the missing 400 core cards
import type { GameCard } from '../types/cardTypes';
import { whitelistEffects } from '../utils/whitelistEffects';
import { computeV21ECost } from '../systems/cost/v21e';

`;

async function rebuildCoreDatabase() {
  try {
    // Find all batch files
    const files = await glob(['src/data/core/**/*.{ts,tsx,js,json}'], { dot: false });
    console.log(`Found ${files.length} potential batch files`);
    
    const imports: string[] = [];
    const spreads: string[] = [];

    let i = 0;
    for (const file of files) {
      const varName = 'Batch' + (i++);
      const relativePath = path.relative('src/data', file).replace(/\\/g, '/');
      
      if (file.endsWith('.json')) {
        // JSON import (requires resolveJsonModule in tsconfig)
        imports.push(`import ${varName}Json from '${relativePath}';`);
        spreads.push(`...(Array.isArray(${varName}Json) ? ${varName}Json : ${varName}Json.cards ?? [])`);
      } else {
        // TypeScript/JavaScript module
        const pathWithoutExt = relativePath.replace(/\.(ts|tsx|js)$/, '');
        imports.push(`import * as ${varName} from '${pathWithoutExt}';`);
        spreads.push(`...Object.values(${varName}).filter(val => Array.isArray(val) && val.length > 0 && typeof val[0] === 'object' && 'id' in val[0]).flat() as GameCard[]`);
      }
    }

    const normalizeFunction = `
// Normalize cards to v2.1E format
function normalize(card: GameCard): GameCard {
  const faction = String(card.faction || '').toLowerCase() as 'truth' | 'government';
  const type = String(card.type || 'MEDIA').toUpperCase() as GameCard['type'];
  
  const normalizedCard: GameCard = { 
    ...card, 
    faction, 
    type,
    // Ensure required fields
    name: card.name || 'Unnamed Card',
    rarity: card.rarity || 'common',
    text: card.text || '',
    flavorTruth: card.flavorTruth || card.flavor || '',
    flavorGov: card.flavorGov || card.flavor || ''
  };
  
  // ZONE cards must have state targeting
  if (normalizedCard.type === 'ZONE') {
    normalizedCard.target = { scope: 'state', count: 1, ...(normalizedCard.target || {}) };
  }
  
  // Whitelist and normalize effects
  normalizedCard.effects = whitelistEffects(normalizedCard.effects || {});
  
  // Recompute cost using v2.1E engine
  normalizedCard.cost = computeV21ECost({ 
    rarity: normalizedCard.rarity as any, 
    effects: normalizedCard.effects 
  });
  
  return normalizedCard;
}
`;

    const body = `${imports.join('\n')}
${normalizeFunction}
const RAW_CARDS: GameCard[] = [
  ${spreads.join(',\n  ')}
];

export const CARD_DATABASE: GameCard[] = RAW_CARDS.map(normalize);

// Development logging
if (typeof window === 'undefined' || import.meta.env.DEV) {
  const truthCount = CARD_DATABASE.filter(c => c.faction === 'truth').length;
  const govCount = CARD_DATABASE.filter(c => c.faction === 'government').length;
  console.log('[REBUILT CORE DB]', { 
    total: CARD_DATABASE.length, 
    truth: truthCount, 
    government: govCount,
    sources: ${files.length}
  });
}
`;

    // Write the new cardDatabase.ts
    const outputPath = 'src/data/cardDatabase.ts';
    fs.writeFileSync(outputPath, header + body, 'utf8');
    
    console.log(`✅ Rebuilt ${outputPath} with ${spreads.length} batch sources`);
    console.log(`Expected: ~400 cards (200 truth + 200 government)`);
    
  } catch (error) {
    console.error('❌ Failed to rebuild core database:', error);
    process.exit(1);
  }
}

rebuildCoreDatabase();